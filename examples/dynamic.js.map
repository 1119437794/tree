{"version":3,"sources":["webpack:///./examples/dynamic.js"],"names":["generateTreeNodes","treeNode","arr","key","props","eventKey","i","push","name","setLeaf","treeData","curKey","level","loopLeaf","data","lev","l","forEach","item","length","indexOf","children","isLeaf","getNewTreeData","child","loop","Demo","React","createClass","propTypes","getInitialState","checkedKeys","componentDidMount","setTimeout","setState","onSelect","info","console","log","onCheck","onLoadData","Promise","resolve","state","render","map","treeNodes","ReactDOM","document","getElementById"],"mappings":"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","file":"examples/dynamic.js","sourcesContent":["/* eslint no-console:0 */\nimport 'rc-tree/assets/index.less';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Tree, { TreeNode } from 'rc-tree';\n\nfunction generateTreeNodes(treeNode) {\n  const arr = [];\n  const key = treeNode.props.eventKey;\n  for (let i = 0; i < 3; i++) {\n    arr.push({ name: `leaf ${key}-${i}`, key: `${key}-${i}` });\n  }\n  return arr;\n}\n\nfunction setLeaf(treeData, curKey, level) {\n  const loopLeaf = (data, lev) => {\n    const l = lev - 1;\n    data.forEach((item) => {\n      if ((item.key.length > curKey.length) ? item.key.indexOf(curKey) !== 0 :\n        curKey.indexOf(item.key) !== 0) {\n        return;\n      }\n      if (item.children) {\n        loopLeaf(item.children, l);\n      } else if (l < 1) {\n        item.isLeaf = true;\n      }\n    });\n  };\n  loopLeaf(treeData, level + 1);\n}\n\nfunction getNewTreeData(treeData, curKey, child, level) {\n  const loop = (data) => {\n    if (level < 1 || curKey.length - 3 > level * 2) return;\n    data.forEach((item) => {\n      if (curKey.indexOf(item.key) === 0) {\n        if (item.children) {\n          loop(item.children);\n        } else {\n          item.children = child;\n        }\n      }\n    });\n  };\n  loop(treeData);\n  setLeaf(treeData, curKey, level);\n}\n\nconst Demo = React.createClass({\n  propTypes: {},\n  getInitialState() {\n    return {\n      treeData: [],\n      checkedKeys: [],\n    };\n  },\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        treeData: [\n          { name: 'pNode 01', key: '0-0' },\n          { name: 'pNode 02', key: '0-1' },\n          { name: 'pNode 03', key: '0-2', isLeaf: true },\n        ],\n        checkedKeys: ['0-0'],\n      });\n    }, 100);\n  },\n  onSelect(info) {\n    console.log('selected', info);\n  },\n  onCheck(checkedKeys) {\n    console.log(checkedKeys);\n    this.setState({\n      checkedKeys,\n    });\n  },\n  onLoadData(treeNode) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const treeData = [...this.state.treeData];\n        getNewTreeData(treeData, treeNode.props.eventKey, generateTreeNodes(treeNode), 2);\n        this.setState({ treeData });\n        resolve();\n      }, 500);\n    });\n  },\n  render() {\n    const loop = (data) => {\n      return data.map((item) => {\n        if (item.children) {\n          return <TreeNode title={item.name} key={item.key}>{loop(item.children)}</TreeNode>;\n        }\n        return (\n          <TreeNode title={item.name} key={item.key} isLeaf={item.isLeaf}\n            disabled={item.key === '0-0-0'}\n          />\n        );\n      });\n    };\n    const treeNodes = loop(this.state.treeData);\n    return (\n      <div>\n        <h2>dynamic render</h2>\n        <Tree\n          onSelect={this.onSelect}\n          checkable onCheck={this.onCheck} checkedKeys={this.state.checkedKeys}\n          loadData={this.onLoadData}\n        >\n          {treeNodes}\n        </Tree>\n      </div>\n    );\n  },\n});\n\nReactDOM.render(<Demo />, document.getElementById('__react-content'));\n\n\n\n// WEBPACK FOOTER //\n// ./examples/dynamic.js"],"sourceRoot":""}